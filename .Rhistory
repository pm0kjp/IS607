(`demo_race_caucasian` = 'CHECKED' OR
`demo_race_african_american` = 'CHECKED' OR
`demo_race_amerindian_alaskanative` = 'CHECKED' OR
`demo_race_asian_american` = 'CHECKED' OR
`demo_race_nativehawaii_pacificisl` = 'CHECKED'
), 'Biracial',
if(`demo_race_caucasian` = 'CHECKED', 'Caucasian',
if(`demo_race_african_american` = 'CHECKED', 'African American',
if(`demo_race_asian_american` = 'CHECKED', 'Asian American',
if(`demo_race_amerindian_alaskanative` = 'CHECKED', 'Amerindian/Alasian Native',
if(`demo_race_nativehawaii_pacificisl` = 'CHECKED', 'Native Hawaii/Pacific Islander',
if(`demo_race_other` = 'CHECKED', 'Other', NULL
)
)
)
)
)
)
)
)
)
)
)
)
AS Race
FROM `study_demographics_demographics`
WHERE (`demo_race_caucasian` LIKE 'Checked'
OR `demo_race_african_american` LIKE 'Checked'
OR `demo_race_asian_american` LIKE 'Checked'
OR `demo_race_amerindian_alaskanative` LIKE 'Checked'
OR `demo_race_nativehawaii_pacificisl` LIKE 'Checked'
OR `demo_race_other` LIKE 'Checked')
AND `demo_sex` IS NOT NULL
AND `demo_houseincome` IS NOT NULL
AND `demo_ethnicity` IS NOT NULL
GROUP BY
`demo_sex`,
`demo_momedu`,
`demo_dadedu`,
`demo_ethnicity`,
`demo_houseincome`,
`demo_race_caucasian`,
`Race`
ORDER BY `demo_houseincome`")
# histogram of sex
ggplot(demoQuery, aes(x=demoQuery$demo_sex)) + geom_histogram(binwidth=.5) + geom_text(aes(y = (..count..),label = scales::percent((..count..)/sum(..count..))), stat="bin",colour="black", vjust=-0.5)
# histogram of household income
ggplot(demoQuery, aes(x=demo_houseincome)) + geom_histogram(binwidth=.5, labels = TRUE) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(y = (..count..),label = scales::percent((..count..)/sum(..count..))), stat="bin",colour="black", vjust=-0.5)
# histogram of household income split by sex
ggplot(demoQuery, aes(x=demo_houseincome, fill=demo_sex)) + geom_histogram(binwidth=.5, labels = TRUE) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(y = (..count..),label = scales::percent((..count..)/sum(..count..))), stat="bin",colour="black", vjust=-0.5)
# stacked bar chart plotting count of race by sex
ggplot(demoQuery, aes(x=Race, fill=demo_sex)) + geom_bar(stat="bin") + geom_text(aes(y = (..count..),label = scales::percent((..count..)/sum(..count..))), stat="bin",colour="black", vjust=-0.5)
library(RMySQL)
library(ggplot2)
demographics<-dbConnect(MySQL(), user="redcap_user", host="reslncar01.research.chop.edu", password="cognishun921", db="car_tabular_data_warehouse")
demoQuery<-dbGetQuery(demographics,
"SELECT COUNT(*) AS `Number of Records`,
`demo_sex`,
`demo_houseincome`,
`demo_momedu`,
`demo_dadedu`,
`demo_ethnicity`,
if(`demo_race_caucasian` = 'CHECKED' AND
(`demo_race_african_american` = 'CHECKED' OR
`demo_race_amerindian_alaskanative` = 'CHECKED' OR
`demo_race_asian_american` = 'CHECKED' OR
`demo_race_nativehawaii_pacificisl` = 'CHECKED' OR
`demo_race_other` = 'CHECKED'
), 'Biracial',
if(`demo_race_african_american` = 'CHECKED' AND
(`demo_race_caucasian` = 'CHECKED' OR
`demo_race_amerindian_alaskanative` = 'CHECKED' OR
`demo_race_asian_american` = 'CHECKED' OR
`demo_race_nativehawaii_pacificisl` = 'CHECKED' OR
`demo_race_other` = 'CHECKED'
), 'Biracial',
if(`demo_race_amerindian_alaskanative` = 'CHECKED' AND
(`demo_race_caucasian` = 'CHECKED' OR
`demo_race_african_american` = 'CHECKED' OR
`demo_race_asian_american` = 'CHECKED' OR
`demo_race_nativehawaii_pacificisl` = 'CHECKED' OR
`demo_race_other` = 'CHECKED'
), 'Biracial',
if(`demo_race_asian_american` = 'CHECKED' AND
source('~/Documents/demoQuery.r', echo=TRUE)
;
aldfj
asldfjo12u
source('~/Documents/demoQuery.r', echo=TRUE)
ggplot(demoQuery, aes(x=demo_houseincome, fill=Race)) + geom_histogram(binwidth=.5, labels = TRUE) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(y = (..count..),label = scales::percent((..count..)/sum(..count..))), stat="bin",colour="black", vjust=-0.5)
str_locate_all(pattern="\\:", usda_text[3])
library(stringr)
str_locate_all(pattern="\\:", usda_text[3])
usda_text
str_locate_all(pattern="\\:", usda_text[3])
widths<-c(43,58-43,73-58, 88-73, length(usda_text[3])-88)
length(usda_text[3])
length(usda_text[3,])
str_length(usda_text[3])
widths<-c(43,58-43,73-58, 88-73, str_length(usda_text[3])-88)
col_widths<-c(43,58-43,73-58, 88-73, str_length(usda_text[3])-88)
read.fwf(usda_text, col_widths, skip=2)
write.file(usda_text,"usda_text.txt")
write(usda_text,"usda_text.txt")
read.fwf("usda_text.txt", col_widths, skip=2)
read.fwf("usda_text.txt", col_widths, skip=6)
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
View(usda_text)
usda_text$V1
head(usda_text)
colnames(usda_text)<-c('commodity', '2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
filter(usda_text, grepl("^\s{0}",commodity))
filter(usda_text, grepl("^\\s{0}",commodity))
filter(usda_text, grepl("^\\s{1}",commodity))
filter(usda_text, grepl("^\\s{2}",commodity))
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{0}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))
View(usda_text)
head(usda_text)
head(usda_text, 100)
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{3}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{0}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s+[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{1}.+ ",commodity))
filter(usda_text, grepl("^\\s{1}[^\\s]+ ",commodity))
filter(usda_text, grepl("^\\s[^\\s]+ ",commodity))
filter(usda_text, grepl("^\\s{1}[^\\s]+ ",commodity)
)
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))
usda_text
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[17:25]
one_space<-filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
two_space<-filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
View(one_space)
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[17:25,]
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,]
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:26,]
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,]
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
View(crop_price_simplified)
gsub("[^A-Za-z\\s].+","",crop_price_simplified$commodity)
gsub("[[:digit:]]*[[:punct:]]*.+","",crop_price_simplified$commodity)
gsub("\\..+","",crop_price_simplified$commodity)
gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
str_trim(crop_price_simplified)
str_trim(crop_price_simplified$commodity
)
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
str_trim(crop_price_simplified$commodity
)
str_trim(crop_price_simplified$commodity)
str_trim(crop_price_simplified)
str(crop_price_simplified)
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$2011_price<-as.character(crop_price_simplified$2011_price)
crop_price_simplified$aug_2014_price<-as.character(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.character(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.character(crop_price_simplified$aug_2015_price)
colnames(usda_text)<-c('commodity', 'base_2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$base_2011_price<-as.character(crop_price_simplified$2011_price)
crop_price_simplified$aug_2014_price<-as.character(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.character(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.character(crop_price_simplified$aug_2015_price)
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
colnames(usda_text)<-c('commodity', 'base_2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
usda_text
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity)) # no spaces -- this is the broadest category of crops
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$base_2011_price<-as.character(crop_price_simplified$base_2011_price)
crop_price_simplified$aug_2014_price<-as.character(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.character(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.character(crop_price_simplified$aug_2015_price)
View(crop_price_simplified)
str_trim(crop_price_simplified)
crop_price_simplified<-str_trim(crop_price_simplified)
crop_price_simplified
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
colnames(usda_text)<-c('commodity', 'base_2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
usda_text
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity)) # no spaces -- this is the broadest category of crops
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$base_2011_price<-as.character(crop_price_simplified$base_2011_price)
crop_price_simplified$aug_2014_price<-as.character(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.character(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.character(crop_price_simplified$aug_2015_price)
str_trim(crop_price_simplified$commodity)
?mapply
mapply(str_trim, crop_price_simplified)
crop_price_simplified<-mapply(str_trim, crop_price_simplified)
crop_price_simplified<-data.frame(mapply(str_trim, crop_price_simplified))
View(crop_price_simplified)
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
colnames(usda_text)<-c('commodity', 'base_2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
usda_text
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity)) # no spaces -- this is the broadest category of crops
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$base_2011_price<-as.character(crop_price_simplified$base_2011_price)
crop_price_simplified$aug_2014_price<-as.character(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.character(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.character(crop_price_simplified$aug_2015_price)
crop_price_simplified2<-data.frame(mapply(str_trim, crop_price_simplified))
View(crop_price_simplified2)
filter(crop_price_simplified, !grepl("[\\,,\\(,[[:alpha:]]]",aug_2014_price)
)
filter(crop_price_simplified, !grepl("[[:alpha:]]",aug_2014_price))
gsub("\\,","",crop_price_simplified)
mapply(gsub("\\,",""), crop_price_simplified)
gsub("\\,","",crop_price_simplified$aug_2014_price)
gsub("\\,","",as.matrix(crop_price_simplified))
data.frame(gsub("\\,","",as.matrix(crop_price_simplified)))
data.frame(gsub("\\([[:alpha;]]+\\)","",as.matrix(crop_price_simplified)))
data.frame(gsub("\\([[:alpha:]]+\\)","",as.matrix(crop_price_simplified)))
crop_price_simplified<-data.frame(gsub("\\([[:alpha:]]+\\)","",as.matrix(crop_price_simplified)))
crop_price_simplified<-data.frame(gsub("\\,","",as.matrix(crop_price_simplified)))
crop_price_simplified<-data.frame(gsub("\\([[:alpha:]]+\\)","",as.matrix(crop_price_simplified)))
as.numeric(crop_price_simplified[,-1])
crop_price_simplified$base_2011_price<-as.numeric(crop_price_simplified$base_2011_price)
crop_price_simplified$aug_2014_price<-as.numeric(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.numeric(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.numeric(crop_price_simplified$aug_2015_price)
str(crop_price_simplified)
crop_price_simplified
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
colnames(usda_text)<-c('commodity', 'base_2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
usda_text
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity)) # no spaces -- this is the broadest category of crops
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$base_2011_price<-as.character(crop_price_simplified$base_2011_price)
crop_price_simplified$aug_2014_price<-as.character(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.character(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.character(crop_price_simplified$aug_2015_price)
crop_price_simplified<-data.frame(mapply(str_trim, crop_price_simplified))
crop_price_simplified<-data.frame(gsub("\\,","",as.matrix(crop_price_simplified)))
crop_price_simplified<-data.frame(gsub("\\([[:alpha:]]+\\)","",as.matrix(crop_price_simplified)))
as.numeric(crop_price_simplified$base_2011_price)
str(crop_price_simplified)
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
colnames(usda_text)<-c('commodity', 'base_2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
usda_text
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity)) # no spaces -- this is the broadest category of crops
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$base_2011_price<-as.character(crop_price_simplified$base_2011_price)
crop_price_simplified$aug_2014_price<-as.character(crop_price_simplified$aug_2014_price)
crop_price_simplified$jul_2015_price<-as.character(crop_price_simplified$jul_2015_price)
crop_price_simplified$aug_2015_price<-as.character(crop_price_simplified$aug_2015_price)
crop_price_simplified<-data.frame(mapply(str_trim, crop_price_simplified))
str(crop_price_simplified)
crop_price_simplified<-data.frame(mapply(str_trim, as.character(crop_price_simplified))
)
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
colnames(usda_text)<-c('commodity', 'base_2011_price', 'aug_2014_price', 'jul_2015_price', 'aug_2015_price')
usda_text
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity)) # no spaces -- this is the broadest category of crops
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified<-data.frame(mapply(str_trim, as.character(crop_price_simplified)))
source('~/.active-rstudio-document', echo=TRUE)
crop_price_simplified
str(crop_price_simplified)
crop_price_simplified$base_2011_price<-as.numeric(as.character(crop_price_simplified$base_2011_price))
crop_price_simplified$aug_2014_price<-as.numeric(as.character(crop_price_simplified$aug_2014_price))
crop_price_simplified$jul_2015_price<-as.numeric(as.character(crop_price_simplified$jul_2015_price))
crop_price_simplified$aug_2015_price<-as.numeric(as.character(crop_price_simplified$aug_2015_price))
str(crop_price_simplified)
crop_price_simplified
summary(crop_price_simplified)
?summary()
summary(crop_price_simplified, all=TRUE)
summary(crop_price_simplified, 50)
summary(crop_price_simplified)
summary(crop_price_simplified)
summary(complete.cases(crop_price_simplified))
summary(crop_price_simplified[which(complete.cases(crop_price_simplified)),]
)
ggplot(crop_price_simplified, aes(x=commodity)) + geom_bar()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(amazon_reviews)
View(amazon_reviews)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
helpful_votes<-reviews %>% html_nodes(".helpful-votes-count") %>% html_text()
rm(list=ls())
library(rvest)
library(stringi)
library(dplyr)
library(tidyr)
library(stringr)
amazon <- read_html("http://www.amazon.com/Hutzler-571-Banana-Slicer/product-reviews/B0047E0EII/ref=cm_cr_dp_see_all_summary?ie=UTF8&showViewpoints=1&sortBy=byRankDescending")
review_section<-amazon %>% html_node(".reviews")
reviews<-review_section %>% html_nodes(".review")
helpful_votes<-reviews %>% html_nodes(".helpful-votes-count") %>% html_text()
helpful_votes
stars<-reviews %>% html_nodes(".a-icon-alt") %>% html_text()
stars
title<-reviews %>% html_nodes(".review-title") %>% html_text()
title
author<-reviews %>% html_nodes(".author") %>% html_text()
author
date<-reviews %>% html_nodes(".review-date") %>% html_text()
date
text<-reviews %>% html_nodes(".review-text") %>% html_text()
head(text)
amazon_reviews<-data.frame(cbind(date, title, author, text, stars, helpful_votes))
head(amazon_reviews)
amazon_reviews$date<-as.Date(amazon_reviews$date, "on %B %d, %Y")
amazon_reviews$stars<-as.numeric(gsub(" out.+", "", amazon_reviews$stars))
amazon_reviews$helpful_votes<-gsub(" of.+", "", amazon_reviews$helpful_votes)
amazon_reviews$helpful_votes<-as.numeric(gsub(",", "", amazon_reviews$helpful_votes))
head(amazon_reviews)
cor(select(amazon_reviews, stars, helpful_votes, word_count))
download.file("https://raw.githubusercontent.com/pm0kjp/IS607/master/papal_popularity.csv", "papal_popularity.csv", method="curl")
papal_popularity<-read.csv("papal_popularity.csv")
head(papal_popularity)
papal_popularity<-transmute(papal_popularity, name=X, date=X, favorable=Favorable, unfavorable=Unfavorable, no_knowledge_or_opinion = Never.heard.of...no.opinion)
papal_popularity<-filter(papal_popularity, name!="")
papal_popularity<-mutate(papal_popularity, name=replace(name, !grepl("Pope", name), NA))
papal_popularity<-mutate(papal_popularity, date=replace(date, grepl("Pope", date), NA))
head(papal_popularity)
repeat.before = function(x) {   # repeats the last non NA value. Keeps leading NA
ind = which(!is.na(x))      # get positions of nonmissing values
if(is.na(x[1]))             # if it begins with a missing, add the
ind = c(1,ind)        # first position to the indices
rep(x[ind], times = diff(   # repeat the values at these indices
c(ind, length(x) + 1) )) # diffing the indices + length yields how often
}
papal_popularity$name<-repeat.before(papal_popularity$name)
head(papal_popularity)
papal_popularity<-filter(papal_popularity, !is.na(date))
head(papal_popularity)
papal_popularity$date<-gsub("\\-.+\\,\\s*", " ", papal_popularity$date)
papal_popularity$date<-as.Date(papal_popularity$date, "%b %d %Y")
droplevels(papal_popularity$name)
papal_popularity$favorable<-as.numeric(as.character(papal_popularity$favorable))
papal_popularity$unfavorable<-as.numeric(as.character(papal_popularity$unfavorable))
papal_popularity$no_knowledge_or_opinion<-as.numeric(as.character(papal_popularity$no_knowledge_or_opinion))
group_by(papal_popularity,name) %>% summarise(mean(favorable))
plot(favorable ~ date, filter(papal_popularity, grepl("John Paul", name)))
plot(favorable ~ date, filter(papal_popularity, grepl("Benedict", name)))
plot(favorable ~ date, filter(papal_popularity, grepl("Francis", name)))
download.file("http://usda.mannlib.cornell.edu/usda/current/AgriPric/AgriPric-09-29-2015.txt", "usda.txt", method="curl")
usda_text<-readLines("usda.txt")
head(usda_text, 20)
which(grepl("Prices Received for Field Crops and Fruits - United States", usda_text))
usda_text<-usda_text[320:length(usda_text)]
head(usda_text, 10)
cutoff<-which(grepl("\\-{20,}", usda_text))[3]  # Where's the third line of 20+ hyphens?  That's our cutoff.
usda_text<-usda_text[1:cutoff]
head(usda_text)
str_locate_all(pattern="\\:", usda_text[3])
col_widths<-c(43,58-43,73-58, 88-73, str_length(usda_text[3])-88)
write(usda_text,"usda_text.txt")
usda_text<-read.fwf("usda_text.txt", col_widths, skip=6)
head(usda_text)
colnames(usda_text)<-c('commodity', 'base_2011', 'aug_2014', 'jul_2015', 'aug_2015')
head(usda_text)
filter(usda_text, grepl("^[[:alpha:]]+ ",commodity)) # no spaces -- this is the broadest category of crops
filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)) # one space -- a bit more specific
filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity)) # two spaces -- more specific still.
crop_price_simplified<-rbind(filter(usda_text, grepl("^\\s{1}[[:alpha:]]+ ",commodity)), filter(usda_text, grepl("^\\s{2}[[:alpha:]]+ ",commodity))[16:25,])
crop_price_simplified$commodity<-gsub("1*/*\\s*\\..+","",crop_price_simplified$commodity)
crop_price_simplified$base_2011<-as.character(crop_price_simplified$base_2011)
crop_price_simplified$aug_2014<-as.character(crop_price_simplified$aug_2014)
crop_price_simplified$jul_2015<-as.character(crop_price_simplified$jul_2015)
crop_price_simplified$aug_2015<-as.character(crop_price_simplified$aug_2015)
crop_price_simplified<-data.frame(mapply(str_trim, crop_price_simplified))
crop_price_simplified<-data.frame(gsub("\\,","",as.matrix(crop_price_simplified)))
crop_price_simplified<-data.frame(gsub("\\([[:alpha:]]+\\)","",as.matrix(crop_price_simplified)))
crop_price_simplified$base_2011<-as.numeric(as.character(crop_price_simplified$base_2011))
crop_price_simplified$aug_2014<-as.numeric(as.character(crop_price_simplified$aug_2014))
crop_price_simplified$jul_2015<-as.numeric(as.character(crop_price_simplified$jul_2015))
crop_price_simplified$aug_2015<-as.numeric(as.character(crop_price_simplified$aug_2015))
str(crop_price_simplified)
head(crop_price_simplified)
summary(crop_price_simplified)
summary(crop_price_simplified[which(complete.cases(crop_price_simplified)),])
head(crop_price_simplified)
gather(crop_price_simplified, "date", "price", 2:5)
crop_price_simplified<-gather(crop_price_simplified, "date", "price", 2:5)
group_by(crop_price_simplified, commodity) %>% summarise()
group_by(crop_price_simplified, commodity) %>% summarise(mean(price))
group_by(crop_price_simplified, commodity) %>% summarise(mean(price), na.rm=TRUE)
group_by(crop_price_simplified, commodity) %>% summarise(mean(price, na.rm=TRUE))
group_by(crop_price_simplified, commodity) %>%  summarise_each(funs(mean(., na.rm = TRUE)))
group_by(crop_price_simplified, commodity) %>%  summarise(funs(mean(., na.rm = TRUE)))
group_by(crop_price_simplified, commodity) %>%  summarise(mean(., na.rm = TRUE))
group_by(crop_price_simplified, commodity) %>%  summarise(mean(price, na.rm = TRUE))
group_by(crop_price_simplified, date) %>%  summarise(mean(price, na.rm = TRUE))
ggplot(crop_price_simplified, aes(x=factor(commodity), fill=factor(date), y=price) + geom_bar(position="dodge", stat="identity") + ylab("Price in Dollars") + scale_y_continuous(breaks = seq(0, 100, by = 5)) + xlab ("") + scale_fill_discrete(name="Time")
)
ggplot(crop_price_simplified, aes(x=factor(commodity), fill=factor(date), y=price)) + geom_bar(position="dodge", stat="identity") + ylab("Price in Dollars") + scale_y_continuous(breaks = seq(0, 100, by = 5)) + xlab ("") + scale_fill_discrete(name="Time")
ggplot(crop_price_simplified, aes(x=factor(commodity), fill=factor(date), y=price) + geom_bar(position="dodge", stat="identity") + ylab("Price in Dollars") +  xlab ("") + scale_fill_discrete(name="Time")
```
ggplot(crop_price_simplified, aes(x=factor(commodity), fill=factor(date), y=price)) + geom_bar(position="dodge", stat="identity") + ylab("Price in Dollars") +  xlab ("") + scale_fill_discrete(name="Time")
library(ggplot2)
srini<-data.frame(rbind(c('Arizona', 'Flake', 0.96, 'Win', 1), c('Arizona', 'Carmona', 0.04, 'Loss', 0)))
srini
colnames(srini)<-c('state', 'candidate', 'forecast_prob', 'result', 'winflag')
srini
spread_data<-spread(srini, candidate, x)
spread_data<-spread(srini, result, candidate)
spread_data
srini<-data.frame(rbind(c('Arizona', 'Flake', 0.96, 'Win', 1), c('Arizona', 'Carmona', 0.04, 'Loss', 0)))
colnames(srini)<-c('state', 'candidate', 'forecast_prob', 'result', 'winflag')
srini<-mutate(srini, result=replace(result, result="Win", "winner"))
srini<-mutate(srini, result=replace(result, "Win", "winner"))
srini<-mutate(srini, result=replace("Win", "winner"))
?replace()
result=replace(srini$result, "Win", "winner"))
result=replace(srini$result, "Win", "winner")
srini<-mutate(srini, result=replace(result, grepl("Win"), "winner"))
srini<-mutate(srini, result=replace(result, grepl("Win", result), "winner"))
srini<-mutate(srini, result=replace(result, grepl("Win", result), "winner"))
srini<-data.frame(rbind(c('Arizona', 'Flake', 0.96, 'Win', 1), c('Arizona', 'Carmona', 0.04, 'Loss', 0)))
colnames(srini)<-c('state', 'candidate', 'forecast_prob', 'result', 'winflag')
library(plyr)
revalue(srini$result, c("Win"="Winner", "Loss"="Loser"))
srini
str(srini)
levels(srini$result)<-revalue(srini$result, c("Win"="Winner", "Loss"="Loser"))
str(srini)
str(srini)
srini
srini<-data.frame(rbind(c('Arizona', 'Flake', 0.96, 'Win', 1), c('Arizona', 'Carmona', 0.04, 'Loss', 0)))
colnames(srini)<-c('state', 'candidate', 'forecast_prob', 'result', 'winflag')
mapvalues(srini$result, from=c("Win", "Loss"), to=c("winner", "loser"))
str(srini)
levels(srini$result)<-list(winner="Win", loser="Loss")
str(srini)
srini<-data.frame(rbind(c('Arizona', 'Flake', 0.96, 'Win', 1), c('Arizona', 'Carmona', 0.04, 'Loss', 0)))
mapvalues(srini$result, from=c("Win", "Loss"), to=c("winner", "loser"))
colnames(srini)<-c('state', 'candidate', 'forecast_prob', 'result', 'winflag')
srini
str(srini)
?data.fram()
?data.frame()
srini<-data.frame(rbind(c('Arizona', 'Flake', 0.96, 'Win', 1), c('Arizona', 'Carmona', 0.04, 'Loss', 0)), stringsAsFactors = FALSE)
colnames(srini)<-c('state', 'candidate', 'forecast_prob', 'result', 'winflag')
str(srini)
result=replace(srini$result, "Win", "winner"))
result=replace(srini$result, "Win", "winner")
result=replace(srini$result, "Loss", "loser")
result=replace(srini$winflag, "0", "loss_probability")
result=replace(srini$winflag, "1", "win_probability")
srini
srini<-data.frame(rbind(c('Arizona', 'Flake', 0.96, 'Win', 1), c('Arizona', 'Carmona', 0.04, 'Loss', 0)), stringsAsFactors = FALSE)
colnames(srini)<-c('state', 'candidate', 'forecast_prob', 'result', 'winflag')
replace(srini$result, "Win", "winner")
srini
srini<-mutate(srini, result=replace(result, grepl("Win"), "winner"))
srini<-mutate(srini, result=replace(result, grepl("Win", result), "winner"))
srini<-mutate(srini, result=replace(result, grepl("Loss", result), "loser"))
srini
srini<-mutate(srini, winflag=replace(winflag, grepl("1", winflag), "win_probability"))
srini<-mutate(srini, winflag=replace(winflag, grepl("0", winflag), "loss_probability"))
srini
spread<-spread(srini, result, candidate)
spread
spread<-spread(spread,winflag,forecast_prob)
spread
?aggregate()
?gather()
install.packages(rjson)
install.packages("rjson")
library(rjson)
setwd('Version Control/IS607/')
fromJSON("books.json")
?fromJSON()
fromJSON(file="books.json")
books_JSON<-data.frame(fromJSON(file="books.json"))
View(books_JSON)
install.packages("RJSONIO", dependencies = TRUE)
library(RJSONIO)
RJSONIO::fromJSON("books.json")
books_JSON<-RJSONIO::fromJSON("books.json")
books_JSON<-data.frame(RJSONIO::fromJSON("books.json"))
View(books_JSON)
View(books_JSON)
books_JSON<-data.frame(RJSONIO::fromJSON("books.json"))
